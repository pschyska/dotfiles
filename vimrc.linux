set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

" === LANGS ===

Bundle 'kchmck/vim-coffee-script'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-cucumber'
Bundle 'pangloss/vim-javascript'
Bundle 'tpope/vim-haml'
Bundle 'nono/vim-handlebars'
Bundle 'groenewege/vim-less'
Bundle 'tpope/vim-markdown'
Bundle 'mmalecki/vim-node.js'
Bundle 'ajf/puppet-vim'
Bundle 'skwp/vim-rspec'
Bundle 'vim-ruby/vim-ruby'
Bundle 'cakebaker/scss-syntax.vim'
Bundle 'timcharper/textile.vim'
Bundle 'chrisbra/csv.vim'

" === TOOLS ===

Bundle 'tpope/vim-fugitive'
Bundle 'mileszs/ack.vim'
Bundle 'camelcasemotion'
Bundle 'ap/vim-css-color'
"Bundle 'ZoomWin'
Bundle 'scrooloose/nerdtree'
  " change pwd when nt changes root
  let NERDTreeChDirMode=1
  let NERDTreeShowHidden=1
  let NERDTreeCasadeOpenSingleChildDir=1
  let NERDTreeIgnore=['^\.DS_Store$', '\.pyc$', '\.pyo$', '\.rbc$', '\.rbo$', '\.class$', '\.o$', '\~$']
  let NERDTreeHijackNetrw=0

  " alias NERDTree to cd :-)
  cnoreabbrev cd NERDTree

  " Default mapping, <leader>n
  map <leader>n :NERDTreeToggle<CR>
  " Select current file in NERDTree
  map <silent> <Leader>f :NERDTreeFind<CR>

  augroup AuNERDTreeCmd
  autocmd AuNERDTreeCmd VimEnter * call s:CdIfDirectory(expand("<amatch>"))

  " If the parameter is a directory, cd into it
  function s:CdIfDirectory(directory)
    let explicitDirectory = isdirectory(a:directory)
    let directory = explicitDirectory || empty(a:directory)

    if explicitDirectory
      exe "cd " . fnameescape(a:directory)
    endif

    " Allows reading from stdin
    " ex: git diff | mvim -R -
    if strlen(a:directory) == 0
      return
    endif

    if directory
      NERDTree
      wincmd p
      bd
    endif

    if explicitDirectory
      wincmd p
    endif
  endfunction

Bundle 'tComment'
  map <silent> <leader>/ :TComment<cr>

"Bundle 'scrooloose/nerdcommenter'
"  map <leader>/ <plug>NERDComToggleComment<CR>


Bundle 'vimwiki'
"Bundle 'jnwhiteh/vim-golang'
"Bundle 'go.vim'
"  set rtp+=~/.vim/bundle/gocode
"  nnoremap <silent> <F8> :Godoc<CR>
"  nnoremap <silent> <F9> :Fmt<CR>
"  nnoremap <silent> <F10> :w<CR>:Fmt<CR>:!go run %<CR>
Bundle 'kien/ctrlp.vim'
  let g:ctrlp_max_files = 100000
  let g:ctrlp_working_path_mode = 0
  let g:ctrlp_clear_cache_on_exit = 1
  let g:ctrlp_max_height = 40
  let g:ctrlp_show_hidden = 1
  let g:ctrlp_map = ''
  let g:ctrlp_custom_ignore = {
    \ 'dir':  '\.git$\|\.hg$\|\.svn$',
    \ 'file': '\.pyc$\|\.pyo$\|\.rbc$|\.rbo$\|\.class$\|\.o$\|\~$\',
    \ }
  map <silent> <C-t> :CtrlP<CR>
  map <silent> <C-y> :CtrlPMRUFiles<CR>
Bundle 'tpope/vim-endwise'
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'
Bundle 'michaeljsmith/vim-indent-object'
Bundle 'edsono/vim-matchit'
Bundle 'ervandew/supertab'
" Bundle 'tpope/vim-surround'
" Bundle 'tpope/vim-repeat'
Bundle 'scrooloose/syntastic'
  let g:syntastic_enable_signs=1
  let g:syntastic_quiet_warnings=0
  let g:syntastic_auto_loc_list=2
Bundle 'YankRing.vim'

" tagbar?, autotag, ctrpl tag mode etc.
" csope stuff?

" eclim

"  " indent java with ... tabs
"  au FileType java setlocal tabstop=4 shiftwidth=4
"  au FileType java setlocal noexpandtab
"  " eclim, fix imports and format source
"  au FileType java map <silent> <C-i> :JavaImportMissing<CR>:JavaImportClean<CR>:%JavaFormat<CR>
"  
"  au FileType java map <silent> <D-I> :JavaImport<CR>
"  au FileType java imap <silent> <D-I> :JavaImport<CR>
"  
"  let g:EclimMavenPomClasspathUpdate = 0
"  let g:EclimJavaCompleteCaseSensitive = 1

" " rebind user completion to C-Space
"  au FileType java imap <C-Space> <C-x><C-u>

" === COLORS ===

"Bundle 'Solarized'
"  if has('gui_running')
"    set background=light
"  else
"    set background=dark
"  endif
"  set t_Co=16
"  let g:solarized_termcolors=16
"  colorscheme solarized
Bundle 'pschyska/damnpaul'
  colorscheme damnpaul

filetype plugin indent on     " required!
"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..

" === AUTOCOMMANDS ===

au FocusLost * silent! wall

" NERDTree hacks
autocmd AuNERDTreeCmd VimEnter * call s:CdIfDirectory(expand("<amatch>"))


" Some file types should wrap their text
function! s:setupWrapping()
  set wrap
  set linebreak
  set textwidth=72
  set nolist
endfunction

""
"" File types
""

" In Makefiles, use real tabs, not tabs expanded to spaces
au FileType make setlocal noexpandtab

" Make sure all mardown files have the correct filetype set and setup wrapping
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown
au FileType markdown call s:setupWrapping()

" Treat JSON files like JavaScript
au BufNewFile,BufRead *.json set ft=javascript

" make Python follow PEP8 for whitespace ( http://www.python.org/dev/peps/pep-0008/ )
au FileType python setlocal softtabstop=4 tabstop=4 shiftwidth=4

" Remember last location in file, but not for commit messages.
" see :help last-position-jump
au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
\| exe "normal! g`\"" | endif

" === MAPPINGS ===

" switch windows
map <silent> <C-H> :wincmd h<CR>

map <silent> <C-J> :wincmd j<CR>
map <silent> <C-K> :wincmd k<CR>
map <silent> <C-L> :wincmd l<CR>

" http://vim.wikia.com/wiki/Insert_newline_without_entering_insert_mode
nnoremap <S-Enter> O<Esc>
nnoremap <CR> o<Esc>

nnoremap <silent> <F8> :Godoc<CR>
nnoremap <silent> <F9> :Fmt<CR>
nnoremap <silent> <F10> :w<CR>:Fmt<CR>:!go run %<CR>
" after using ., move cursor back to editing location when you started
" (http://www.rousette.org.uk/blog/archives/vim-and-zsh-oh-my/)
nmap . .`[

" Edit .vimrc
nmap <C-F12> :e ~/.vimrc<CR>
" save and source current buffer
nmap <C-F11> :w<CR>:source %<CR>

" format the entire file
nmap <leader>fef ggVG=

" Map the arrow keys to be based on display lines, not physical lines
map <Down> gj
map <Up> gk

" Toggle hlsearch with <leader>hs
nmap <leader>hs :set hlsearch! hlsearch?<CR>

" Adjust viewports to the same size
map <Leader>= <C-w>=

" resize window

nnoremap <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap <Leader>. :exe "vertical resize " . (winwidth(0) * 3/2)<CR>
nnoremap <Leader>, :exe "vertical resize " . (winwidth(0) * 2/3)<CR>

" Map command-[ and command-] to indenting or outdenting
" while keeping the original selection in visual mode
vmap <A-]> >gv
vmap <A-[> <gv

nmap <A-]> >>
nmap <A-[> <<

omap <A-]> >>
omap <A-[> <<

imap <A-]> <Esc>>>i
imap <A-[> <Esc><<i

" After whitespace, insert the current directory into a command-line path
cnoremap <expr> <C-P> getcmdline()[getcmdpos()-2] ==# ' ' ? expand('%:p:h') : "\<C-P>"


" === SETTINGS ===

syntax enable
set number
set ruler
set hidden
set encoding=utf-8

set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode

set hlsearch    " highlight matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter

set backupdir=/tmp    " where to put backup files.
set directory=/tmp      " where to put swap files.

" Set 7 lines to the cursor when moving vertical from
" http://amix.dk/vim/vimrc.html
set so=7
set clipboard=unnamedplus

set listchars=""
set listchars=tab:▸\  
"set listchars=tab:\ \ 
set listchars+=trail:·
"set listchars+=trail:\ 
set listchars+=extends:>
set listchars+=precedes:<

set completeopt+=longest

set wildignore=""
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
set wildignore+=*.swp,*~,._*
set wildignore+=*.png,*.jpg,*.jpeg,*.gif,*.psd,*.tiff
set wildignore+=*.DS_Store


set laststatus=2  " always show the status bar

" Start the status line
set statusline=%f\ %m\ %r
set statusline+=Line:%l/%L[%p%%]
set statusline+=Col:%v
set statusline+=Buf:#%n
set statusline+=[%b][0x%B]

set statusline+=%{fugitive#statusline()}

"set colorcolumn=81



" XXX derp?
" enable mouse integration, for normal an visual modes
" set mouse=nvc
" check if really needed:
" http://vim.wikia.com/wiki/Using_the_mouse_for_Vim_in_an_xterm
" :map <xCSI>[62~ <MouseDown>
